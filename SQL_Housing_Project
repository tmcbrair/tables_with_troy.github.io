-- CLEANING
SELECT s.address, s.bdrms, s.bedrooms, (s.bdrms-s.bedrooms) AS bed_difference 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.Bdrms IS NULL;

SELECT s.proptype, s.address, s.bdrms, s.bedrooms, (s.bdrms-s.bedrooms) AS bed_difference 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.Bdrms > s.bedrooms AND s.bedrooms >= 1
ORDER BY s.bdrms;

-- Used to update the value from null to the county listed value
UPDATE s
SET s.Bdrms = h.bedrooms
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.Bdrms IS NULL;

-- Used to update the value from 0 to whatever is listed by the county
SELECT s.address, s.bdrms, s.bedrooms, (s.bdrms-s.bedrooms) AS bed_difference 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.Bdrms = 0 AND s.bdrms != s.bedrooms;

UPDATE s
SET s.Bdrms = h.bedrooms
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.Bdrms = 0 AND s.bdrms != s.bedrooms;

-- Now the updates need to be a little more careful since we don't want to overwrite any data that could be correct
SELECT s.address, s.bdrms, s.bedrooms, (s.bdrms-s.bedrooms) AS bed_difference 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.Bdrms > s.bedrooms AND s.bedrooms >= 1;

UPDATE s
SET s.Bdrms = h.bedrooms
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.Bdrms > s.bedrooms AND s.bedrooms >= 1;

-- Setting the number of bedrooms in residential property = 1 if 0
SELECT * 
FROM sales_data s
WHERE (s.bdrms = 0 AND s.proptype = 'residential') OR (s.bdrms = 0 AND s.proptype = 'condominium');

UPDATE s
SET s.Bdrms = 1
FROM sales_data s
WHERE (s.bdrms = 0 AND s.proptype = 'residential') OR (s.bdrms = 0 AND s.proptype = 'condominium');

-- Now to update the number of rooms on the sales data to that of the housing_data
SELECT s.proptype, s.address, s.nr_of_rms, h.NR_rooms, (s.nr_of_rms-h.NR_rooms) AS room_difference, s.bedrooms 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.nr_of_rms = 0 AND h.NR_rooms != s.nr_of_rms
ORDER BY room_difference;

SELECT s.proptype, s.address, s.nr_of_rms, h.NR_rooms, (s.nr_of_rms-h.NR_rooms) AS room_difference, s.bedrooms 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.nr_of_rms IS NULL
ORDER BY room_difference;

UPDATE s
SET s.nr_of_rms = h.NR_rooms
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.nr_of_rms = 0 AND h.NR_rooms != s.nr_of_rms;

-- Now time to compare the values of each and get a little more defined as to what we update
SELECT s.address, s.nr_of_rms, h.nr_rooms, (s.nr_of_rms-h.nr_rooms) AS room_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.nr_of_rms > h.nr_rooms AND h.nr_rooms >= 1;

UPDATE s
SET s.nr_of_rms = h.NR_rooms
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.nr_of_rms > h.nr_rooms AND h.nr_rooms >= 1;

-- A few nulls persist still in the nr_of_rooms
SELECT s.address, s.nr_of_rms, h.nr_rooms, (s.nr_of_rms-h.nr_rooms) AS room_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.nr_of_rms > h.nr_rooms AND h.nr_rooms >= 1;

SELECT s.address, s.nr_of_rms, h.nr_rooms, (s.nr_of_rms-h.nr_rooms) AS room_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.nr_of_rms IS NULL AND s.proptype = 'residential';

UPDATE s
SET s.nr_of_rms = h.NR_rooms
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.nr_of_rms IS NULL AND h.nr_rooms > 0;

-- Now to set all nr_of_rms to 1 on all condo and residential properties since you can't have no bedrooms
SELECT s.address, s.nr_of_rms, h.nr_rooms, (s.nr_of_rms-h.nr_rooms) AS room_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE (s.nr_of_rms IS NULL AND s.proptype = 'residential') OR (s.nr_of_rms IS NULL AND s.proptype = 'condominium');

UPDATE s
SET s.nr_of_rms = 1
FROM sales_data s
WHERE (s.nr_of_rms IS NULL AND s.proptype = 'residential') OR (s.nr_of_rms IS NULL AND s.proptype = 'condominium');

-- Let's do the same for all nr rooms with 0 rooms
SELECT s.address, s.nr_of_rms, h.nr_rooms, (s.nr_of_rms-h.nr_rooms) AS room_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE (s.nr_of_rms = 0 AND s.proptype = 'residential') OR (s.nr_of_rms = 0 AND s.proptype = 'condominium');

UPDATE s
SET s.nr_of_rms = 1
FROM sales_data s
WHERE (s.nr_of_rms = 0 AND s.proptype = 'residential') OR (s.nr_of_rms = 0 AND s.proptype = 'condominium');

-- Now to clean our full_bath count
SELECT s.address, s.fbath, h.baths, (s.fbath-h.baths) AS bath_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.fbath = 0 AND h.baths > 0;

SELECT * FROM housing_data h;

-- Update null values first
UPDATE s
SET s.fbath = h.baths
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.fbath IS NULL AND h.baths > 0;

-- Now to do the fbaths that are zero
SELECT s.address, s.fbath, h.baths, (s.fbath-h.baths) AS bath_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.fbath = 0 AND h.baths > 0;

UPDATE s
SET s.fbath = h.baths
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.fbath = 0 AND h.baths > 0;

-- Now to compare and contrast the two tables
SELECT s.address, s.fbath, h.baths, (s.fbath-h.baths) AS bath_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.fbath > h.baths AND h.baths >= 1;

-- Now to set all bathroom counts to 1 if 0 on the sales data since you can't have zero bathrooms
SELECT s.fbath 
FROM sales_data s
WHERE (s.fbath IS NULL AND s.proptype = 'residential') OR (s.fbath IS NULL AND s.proptype = 'condominium');

UPDATE s
SET s.fbath = 1
FROM sales_data s
WHERE (s.fbath IS NULL AND s.proptype = 'residential') OR (s.fbath IS NULL AND s.proptype = 'condominium');

-- Now to move on to half baths which are called powder rooms within the housing data. This was confirmed within the readme
SELECT s.address, s.hbath, h.powder_rooms, (s.hbath-h.powder_rooms) AS halfbath_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.hbath = 0 AND s.proptype = 'residential'
ORDER BY halfbath_diff;

UPDATE s
SET s.hbath = h.powder_rooms
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE h.powder_rooms > s.hbath;

SELECT s.address, s.hbath, h.powder_rooms, (s.hbath-h.powder_rooms) AS halfbath_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.hbath IS NULL
ORDER BY halfbath_diff;

-- Since we've lined up the half baths already, it was time to populate any null values with 0 since a property does not need to have a half bath
UPDATE s
SET s.hbath = 0
FROM sales_data s
WHERE s.hbath IS NULL;

SELECT * 
FROM sales_data s
WHERE s.hbath IS NULL;

SELECT s.address, s.hbath, h.powder_rooms, (s.hbath-h.powder_rooms) AS halfbath_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
ORDER BY halfbath_diff;

-- Need to remove the hbath outlier in the sales data tied to 6012 N 37th using verified information from county data
UPDATE s
SET s.hbath = 1
FROM sales_data s
WHERE s.address = '6012 N 37TH ST';

-- Finally to take care of finished square footage
SELECT s.address, s.fin_sqft, h.bldg_area, (s.fin_sqft-h.bldg_area) AS sqft_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.fin_sqft = 0 AND s.proptype = 'residential';

UPDATE s
SET s.fin_sqft = 1710
FROM sales_data s
WHERE s.address = '2222 E MORGAN AV';

-- Let's do the same where sqft is zero
SELECT s.address, s.fin_sqft, h.bldg_area, (s.fin_sqft-h.bldg_area) AS sqft_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.fin_sqft = 0 AND h.bldg_area > 0;

UPDATE s
SET s.fin_sqft = h.bldg_area
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.fin_sqft = 0 AND h.bldg_area > 0;

-- Time to review side by side to see if county or sales data appears more accurate
SELECT s.address, s.fin_sqft, h.bldg_area, (s.fin_sqft-h.bldg_area) AS sqft_diff, s.sale_price 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.fin_sqft IS NULL AND s.proptype = 'residential';

UPDATE s
SET s.proptype = 'Vacant Land'
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.fin_sqft IS NULL AND s.proptype = 'residential';

-- Time to update the lot size although this is not a large market factor
SELECT s.address, s.lotsize, CAST(h.lot_area AS FLOAT) AS Lot_area, (s.lotsize-CAST(h.lot_area AS FLOAT)) AS lot_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.lotsize = 0 AND CAST(h.lot_area AS FLOAT) > 1 AND s.proptype = 'condominium'
ORDER BY lot_diff;

UPDATE s
SET s.lotsize = CAST(h.lot_area AS FLOAT)
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.lotsize = 0 AND CAST(h.lot_area AS FLOAT) > 1 AND s.proptype = 'residential';

-- Final bit is the year built since this does play a role
SELECT s.address, s.year_built, h.yr_built, (s.year_built-h.yr_built) AS year_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.year_built = 0 AND h.yr_built > 0;

UPDATE s
SET s.year_built = h.yr_built
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.year_built IS NULL AND h.yr_built > 0;

-- Now to update the zero values
SELECT s.address, s.year_built, h.yr_built, (s.year_built-h.yr_built) AS year_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.year_built = 0 AND h.yr_built > 0;

UPDATE s
SET s.year_built = h.yr_built
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.year_built = 0 AND h.yr_built > 0;

-- Just to see what we're left with
SELECT s.address, s.year_built, h.yr_built, (s.year_built-h.yr_built) AS year_diff 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.Taxkey
WHERE s.year_built = 0 AND s.proptype = 'residential';

SELECT * 
FROM sales_data s
WHERE s.proptype = 'residential' AND s.fin_sqft = 0 OR s.proptype = 'condominium' AND s.fin_sqft = 0;

UPDATE s
SET s.proptype = 'Commercial'
FROM sales_data s
WHERE s.address = '318 E CHICAGO ST';

UPDATE s
SET s.fin_sqft = 1103
FROM sales_data s
WHERE s.address = '1300 N PROSPECT AV' AND s.fin_sqft = 0;

-- This shows the progression by zipcode where homes are being purchased over asking
SELECT YEAR(s.sale_date) AS Year, s.geo_zip_code, AVG((s.sale_price-s.county_value)/s.county_value)*100 AS percent_diff 
FROM sales_data s
WHERE s.proptype = 'residential' AND s.county_value > 0 AND YEAR(s.sale_date) <= 2022
GROUP BY YEAR(s.sale_date), s.geo_zip_code
ORDER BY YEAR(s.sale_date);

-- This chart would show which zipcodes have been the most active in the past 21 years
SELECT YEAR(s.sale_date) AS Year, s.geo_zip_code, COUNT(*) AS Total_purchases 
FROM sales_data s
JOIN housing_data h ON h.taxkey = s.taxkey
GROUP BY YEAR(s.sale_date), s.geo_zip_code
ORDER BY YEAR(s.sale_date);

-- From there we can break down the changing market based on zipcode, to see which zipcodes are trending upwards and which are trending downwards in terms of total sales activity
WITH YearlyPurchases AS (
    SELECT 
        YEAR(s.sale_date) AS Year, 
        s.geo_zip_code, 
        COUNT(*) AS Total_purchases
    FROM sales_data s
    JOIN housing_data h ON h.taxkey = s.taxkey
    GROUP BY YEAR(s.sale_date), s.geo_zip_code
)

SELECT 
    Year, 
    geo_zip_code, 
    Total_purchases,
    Total_purchases - LAG(Total_purchases) OVER (PARTITION BY geo_zip_code ORDER BY Year) AS YoY_Change
FROM YearlyPurchases;

-- Do foreclosures and high crime correlate together?
SELECT h.geo_zip_code, COUNT(*) AS all_foreclosures, mc.crime_count AS crime_rate 
FROM housing_data h
LEFT JOIN (
    SELECT zip, COUNT(*) AS crime_count
    FROM milwaukee_crime.dbo.merged_years
    GROUP BY zip
) AS mc ON h.geo_zip_code = mc.zip
WHERE h.convey_type IN ('sd', 'sh', 'md', 'jf')
GROUP BY h.geo_zip_code, mc.crime_count;

-- I added the county_value (C_A_TOTAL) from the Housing_data table to simplify future joins and analysis
ALTER TABLE sales_data
ADD County_value INT;

UPDATE s
SET s.county_value = h.C_A_TOTAL
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.taxkey = '3650250100';

-- NULL values were manually found and a sheet imported into SQL for migration on the taxkey
UPDATE s
SET s.county_value = c.new_county_value
FROM sales_data s
JOIN county_values c ON c.taxkey = s.taxkey;

-- (Tabluea Viz) - Calculates the percentage above or below the county value since we know the county value to have the strongest correlation with final sale price
SELECT MONTH(s.sale_date) AS Month, AVG((s.sale_price-s.county_value)/s.county_value)*100 AS percentage_diff 
FROM sales_data s
WHERE s.proptype = 'residential' AND s.county_value > 0 AND YEAR(s.sale_date) <= 2022
GROUP BY MONTH(s.sale_date)
ORDER BY MONTH(s.sale_date);

-- (Tableau Viz) - Calculates the difference between total sales and inventory for any given month
SELECT YEAR(s.sale_date) AS Year, MONTH(s.sale_date) AS Month, COUNT(*) AS Total_sales, h.inventory, (h.inventory - COUNT(*)) AS Difference 
FROM sales_data s
JOIN housing_inventory h ON YEAR(s.sale_date) = YEAR(h.DATE) AND MONTH(s.sale_date) = MONTH(h.DATE)
WHERE s.proptype = 'residential'
GROUP BY MONTH(s.sale_date), YEAR(s.sale_date), h.inventory
ORDER BY YEAR(s.sale_date), MONTH(s.sale_date);

-- Do foreclosures and high crime correlate together?
SELECT h.geo_zip_code, COUNT(*) AS all_foreclosures, mc.crime_count AS crime_rate 
FROM housing_data h
LEFT JOIN (
    SELECT zip, COUNT(*) AS crime_count
    FROM milwaukee_crime.dbo.merged_years
    GROUP BY zip
) AS mc ON h.geo_zip_code = mc.zip
WHERE h.convey_type IN ('sd', 'sh', 'md', 'jf')
GROUP BY h.geo_zip_code, mc.crime_count;

-- I added the county_value (C_A_TOTAL) from the Housing_data table to simplify future joins and analysis
ALTER TABLE sales_data
ADD County_value FLOAT;

UPDATE s
SET s.county_value = h.C_A_TOTAL
FROM sales_data s
JOIN housing_data h ON s.Taxkey = h.Taxkey
WHERE s.taxkey = '3650250100';

-- NULL values were manually found and a sheet imported into SQL for migration on the taxkey
UPDATE s
SET s.county_value = c.new_county_value
FROM sales_data s
JOIN county_values c ON c.taxkey = s.taxkey;

-- (Tableau Viz) - Calculates the percentage above or below the county value since we know the county value to have the strongest correlation with final sale price
SELECT MONTH(s.sale_date) AS Month, AVG((s.sale_price-s.county_value)/s.county_value)*100 AS percentage_diff 
FROM sales_data s
WHERE s.proptype = 'residential' AND s.county_value > 0 AND YEAR(s.sale_date) <= 2022
GROUP BY MONTH(s.sale_date)
ORDER BY MONTH(s.sale_date);

-- (Tableau Viz) - Calculates the difference between total sales and inventory for any given month
SELECT YEAR(s.sale_date) AS Year, MONTH(s.sale_date) AS Month, COUNT(*) AS Total_sales, h.inventory, (h.inventory - COUNT(*)) AS Difference 
FROM sales_data s
JOIN housing_inventory h ON YEAR(s.sale_date) = YEAR(h.DATE) AND MONTH(s.sale_date) = MONTH(h.DATE)
WHERE s.proptype = 'residential'
GROUP BY MONTH(s.sale_date), YEAR(s.sale_date), h.inventory
ORDER BY YEAR(s.sale_date), MONTH(s.sale_date);
